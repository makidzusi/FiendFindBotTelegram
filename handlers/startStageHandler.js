import UserService from "../services/UserService.js"
import stages from '../helpers/stages.js'
import findUserHandler from "./findUserHandler.js";
import url from 'url';
import client from '../elkclient/index.js'

const __dirname = url.fileURLToPath(new URL('.', import.meta.url));

export default async function (bot, msg) {
    const user = await UserService.getUserByTelegramIdAsync(msg.from.id)
    if (user) {
        const user_stage = user.stage;
        switch (user_stage) {
            case stages.start:
                UserService.updateUserByTelegramIdAsync({
                    telegram_id: msg.from.id,
                    stage: stages.age_input,
                })
                bot.sendMessage(msg.chat.id, '–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?')
                return
            case stages.age_input:
                const age = parseInt(msg.text)
                if (isNaN(age)) {
                    bot.sendMessage(msg.chat.id, '–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
                    return
                }
                UserService.updateUserByTelegramIdAsync({
                    telegram_id: msg.from.id,
                    stage: stages.name_input,
                    age: age
                })
                bot.sendMessage(msg.chat.id, '–í–≤–µ–¥–∏ —Å–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è')
                return
            case stages.name_input:
                const name = msg.text
                UserService.updateUserByTelegramIdAsync({
                    name: name,
                    telegram_id: msg.from.id,
                    stage: stages.description_input
                })
                bot.sendMessage(msg.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ')
                return
            case stages.description_input:
                const description = msg.text
                UserService.updateUserByTelegramIdAsync({
                    description: description,
                    telegram_id: msg.from.id,
                    stage: stages.image_input
                })
                bot.sendMessage(msg.chat.id, '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –∞–Ω–∫–µ—Ç–µ')
                return
            case stages.image_input:
                bot.sendMessage(msg.chat.id, '–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π!');
                return
            case stages.review_profile:
                if (msg.text === 'üëç') {
                    bot.sendMessage(msg.chat.id, '–í–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫')
                    const user = await UserService.getUserByTelegramIdAsync(msg.from.id)
                    const target_user = await UserService.getUserByIdAsync(user.current_viewed_profile)
                    const photo = `${__dirname}/../images/${user.image}`;
                    bot.sendPhoto(target_user.telegram_id, photo, {
                        caption: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ª–∞–π–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${user.t_username}, –í–æ–∑—Ä–∞—Å—Ç ${user.age}, ${user.description}`
                    })
                    return
                }
                if (msg.text === 'üëé') {

                    await findUserHandler(bot, msg)

                }
                if (msg.text === '‚öôÔ∏è') {
                    await UserService.updateUserByTelegramIdAsync({
                        telegram_id: msg.from.id,
                        stage: stages.in_settings
                    })
                    bot.sendMessage(msg.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /continue –¥–ª—è –ø—Ä–æ–¥–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞, /startfind –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ /editprofile –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è', {
                        reply_markup: JSON.stringify({
                            keyboard: [
                                ['/continue'],
                                ['/startfind'],
                                ['/editprofile']
                            ]
                        })
                    })
                    return
                    //bot.sendMessage(msg.from.id, '–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?')
                }
                bot.sendMessage(msg.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã –¥–ª—è –≤–≤–æ–¥–∞: üëç –∏–ª–∏ üëé –∏–ª–∏ ‚öôÔ∏è', {
                    reply_markup: JSON.stringify({
                        keyboard: [
                            ['üëç'],
                            ['üëé'],
                            ['‚öôÔ∏è']
                        ]
                    })
                })
                return
            case stages.in_settings:
            case stages.finished:

                const text = msg.text
                if (text === '/find') {
                    await UserService.updateUserByTelegramIdAsync({
                        telegram_id: msg.from.id,
                        stage: stages.review_profile
                    })
                    await findUserHandler(bot, msg)

                }
                if (msg.text.substring(0, 5) === '/find') {

                    const userFromElk = await client.search({
                        index: 'users',
                        query: {
                            match: {
                                description: msg.text.substring(5)
                            }
                        }
                    })
                    const hits = userFromElk.hits.hits
                    if (!hits.length) {
                        bot.sendMessage(msg.from.id, '–ò–∑–∏–≤–Ω–∏—Ç–µ, –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ!')
                        return
                    }
                    const rand = Math.floor(Math.random() * hits.length)
                    const user = hits[rand]
                    console.log(user._source)

                    const finded_user = await UserService.getUserByTelegramIdAsync(user._source.telegram_id)
                    const photo = `${__dirname}/../images/${finded_user.image}`;
                    bot.sendPhoto(msg.chat.id, photo, {
                        caption: `${finded_user.name}, –í–æ—Ä–∞—Å—Ç - ${finded_user.age}, –ì–æ—Ä–æ–¥ - ${finded_user.city}, ${finded_user?.description || ''}, —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: @${finded_user?.t_username}`
                    })
                    console.log(userFromElk.hits)
                }

                return
                bot.sendMessage(msg.chat.id, '–í–≤–µ–¥–∏—Ç–µ /find , —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!')
                return
            default:
                bot.sendMessage(msg.chat.id, '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!')
        }
    } else {
        bot.sendMessage(msg.chat.id, '–£ –≤–∞—Å –Ω–µ —Å–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å! –ù–∞–ø–∏—à–∏—Ç–µ /start , —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å')
    }
}